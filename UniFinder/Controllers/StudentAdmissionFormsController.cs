using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using System.Web.Razor.Text;
using UniFinder;

namespace UniFinder.Controllers
{
    public class StudentAdmissionFormsController : Controller
    {
        private Uni_Find_DB_310324Entities db = new Uni_Find_DB_310324Entities();
        public void GenderType()
        {
            ViewBag.genderlist = new SelectList(new[]
{
    new { ID = "Male", Name = "Male" },
    new { ID = "Female", Name = "Female" },
},
"ID", "Name");
        }

        // GET: StudentAdmissionForms
        public ActionResult Index()
        {
            try
            {
                return View(db.StudentAdmissionForms.Where(x => x.FormID != null).ToList());
            }
            catch (Exception)
            {

                throw;
            }
        }

        // GET: StudentAdmissionForms/Details/5
        public ActionResult Details(int? id)
        {
            try
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                StudentAdmissionForm studentAdmissionForm = db.StudentAdmissionForms.Find(id);
                if (studentAdmissionForm == null)
                {
                    return HttpNotFound();
                }
                return View(studentAdmissionForm);
            }
            catch (Exception)
            {

                throw;
            }
        }

        // GET: StudentAdmissionForms/Create
        public ActionResult Create(int id)
        {
            try
            {
                if (Session["UserID"] != null && Session["Usertype"].ToString() == "Student")
                {
                    ProgramTbl p = db.ProgramTbls.Where(x => x.ProgramID == id).FirstOrDefault();
                    Session["ProgramName"] = p.ProgramName;
                    Session["ProgramID"] = p.ProgramID;
                    StudentAdmissionForm studentAdmissionForm = new StudentAdmissionForm();
                    int studentid = Convert.ToInt32(Session["UserID"]);
                    RegisterTbl reg = db.RegisterTbls.Where(x => x.StdID == studentid).FirstOrDefault();
                    studentAdmissionForm.Email = reg.Email;
                    studentAdmissionForm.UniID = Session["UniName"].ToString();
                    studentAdmissionForm.ProgramID = p.ProgramName;
                    studentAdmissionForm.DegreeID = p.Degree;
                    studentAdmissionForm.Name = reg.Name;
                    studentAdmissionForm.Gender = reg.Gender;
                    studentAdmissionForm.CNIC = reg.CNIC;
                    studentAdmissionForm.DOB = reg.DOB;
                    studentAdmissionForm.Qualification = reg.Qualification;
                    studentAdmissionForm.City = reg.City;
                    studentAdmissionForm.Country = reg.Country;

                    ViewBag.FormCode = AutoGeneratedCode();
                    GenderType();
                    return View(studentAdmissionForm);
                }
                else
                {
                    TempData["LoginUni"] = "You must login to apply for the admission in University";
                    TempData.Keep();
                    return RedirectToAction("Programs", "Website", new { id = Convert.ToInt32(Session["ProgramID"]) });
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        // POST: StudentAdmissionForms/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "ApplicationID,Name,FormID,DOB,CNIC,Gender,Policy,Qualification,UniID,ProgramID,DegreeID,FormDate,City,Country,Email,Status,CreateDate,CreatedBy")] StudentAdmissionForm studentAdmissionForm)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    int progID = Convert.ToInt32(Session["ProgramID"]);
                    ProgramTbl p = db.ProgramTbls.Where(x => x.ProgramID == progID).FirstOrDefault();

                    //studentAdmissionForm.DegreeID = p.Degree;
                    //studentAdmissionForm.ProgramID = p.ProgramName;
                    //studentAdmissionForm.UniID = Session["UniName"].ToString();
                    studentAdmissionForm.Status = false;
                    studentAdmissionForm.PaymentStatus = "Pending";
                    studentAdmissionForm.CreateDate = DateTime.Now;
                    studentAdmissionForm.CreatedBy = Convert.ToInt32(Session["UserID"]);
                    db.StudentAdmissionForms.Add(studentAdmissionForm);
                    db.SaveChanges();
                    TempData["Success"] = "Form submitted successfully";
                    TempData.Keep();
                    if (studentAdmissionForm.Email != null)
                    {
                        Class.Email e = new Class.Email();
                        e.EmailSend(studentAdmissionForm.Email);
                    }
                    return RedirectToAction("Create");
                }

                return View(studentAdmissionForm);
            }
            catch (Exception)
            {
                TempData["Success"] = "Something went wrong";
                TempData.Keep();
                return View("Create", studentAdmissionForm);
            }
        }

        // GET: StudentAdmissionForms/Edit/5
        public ActionResult Edit(int? id)
        {
            try
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                StudentAdmissionForm studentAdmissionForm = db.StudentAdmissionForms.Find(id);
                if (studentAdmissionForm == null)
                {
                    return HttpNotFound();
                }
                return View(studentAdmissionForm);
            }
            catch (Exception)
            {

                throw;
            }
        }

        // POST: StudentAdmissionForms/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "ApplicationID,Name,FormID,DOB,Gender,Policy,Qualification,UniID,ProgramID,DegreeID,FormDate,Status,CreateDate,CreatedBy")] StudentAdmissionForm studentAdmissionForm)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    db.Entry(studentAdmissionForm).State = EntityState.Modified;
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }
                return View(studentAdmissionForm);
            }
            catch (Exception)
            {

                throw;
            }
        }

        // GET: StudentAdmissionForms/Delete/5
        public ActionResult Delete(int? id)
        {
            try
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                StudentAdmissionForm studentAdmissionForm = db.StudentAdmissionForms.Find(id);
                if (studentAdmissionForm == null)
                {
                    return HttpNotFound();
                }
                return View(studentAdmissionForm);
            }
            catch (Exception)
            {

                throw;
            }
        }

        // POST: StudentAdmissionForms/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            try
            {
                StudentAdmissionForm studentAdmissionForm = db.StudentAdmissionForms.Find(id);
                db.StudentAdmissionForms.Remove(studentAdmissionForm);
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            catch (Exception)
            {

                throw;
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        protected string AutoGeneratedCode()
        {
            try
            {
                string newcustCode = string.Empty;
                var custCode = db.StudentAdmissionForms.OrderByDescending(x => x.ApplicationID).FirstOrDefault();
                if (custCode == null)
                {
                    newcustCode = "Form-" + 1;
                }
                else
                {
                    string[] splCustCode = custCode.FormID.Split('-');
                    newcustCode = "Form-" + (Convert.ToInt32(splCustCode[1]) + 1);
                }
                return newcustCode;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public ActionResult Approve(int? id)
        {
            try
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                StudentAdmissionForm student = db.StudentAdmissionForms.Find(id);
                if (student == null)
                {
                    return HttpNotFound();
                }
                student.PaymentStatus = "Approved";
                student.Status = true;
                db.Entry(student).State = EntityState.Modified;
                db.SaveChanges();
                TempData["PaymentApproved"] = "Admission form has been approved";
                return RedirectToAction("Index");
            }
            catch (Exception)
            {

                throw;
            }
        }

        public ActionResult RejectForm(int? id)
        {
            try
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                StudentAdmissionForm student = db.StudentAdmissionForms.Find(id);
                if (student == null)
                {
                    return HttpNotFound();
                }
                student.PaymentStatus = "Rejected";
                student.Status = false;
                db.Entry(student).State = EntityState.Modified;
                db.SaveChanges();
                TempData["PaymentApproved"] = "Admission form has been rejected";
                return RedirectToAction("Index");
            }
            catch (Exception)
            {

                throw;
            }
        }
    }
}
